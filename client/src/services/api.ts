/**
 * API Service for ResumeForge
 * Handles communication with AWS Lambda functions via API Gateway
 */

// Import API configuration (will be generated by deployment script)
let API_BASE_URL = 'http://localhost:3001'; // Default for local development

try {
  // Try to import the generated config (only exists after deployment)
  const { API_BASE_URL: deployedUrl } = require('../config/api');
  API_BASE_URL = deployedUrl;
} catch (error) {
  // Use environment variable or fallback to localhost
  API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';
}

export interface ATSScoreRequest {
  resumeText: string;
  jobDescription: string;
}

export interface ATSScoreResponse {
  success: boolean;
  data: {
    score: number;
    matchedKeywords: string[];
    missingKeywords: string[];
    analysis: {
      totalJdKeywords: number;
      totalResumeKeywords: number;
      matchPercentage: number;
      keywordCoverage: string;
    };
  };
  metadata: {
    timestamp: string;
    requestId: string;
  };
}

export interface PDFGenerationRequest {
  html: string;
  fileName: string;
}

export interface PDFGenerationResponse {
  success: boolean;
  url: string;
  data: {
    fileName: string;
    pdfUrl: string;
    s3Key: string;
    s3Bucket: string;
    fileSize: number;
    uploadedAt: string;
  };
  metadata: {
    requestId: string;
    processingTime: {
      total: number;
      pdfGeneration: number;
      s3Upload: number;
    };
    timestamp: string;
  };
}

export interface APIError {
  error: string;
  message: string;
  details?: string;
  requestId?: string;
  timestamp?: string;
}

/**
 * Base API client with error handling
 */
class APIClient {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  private async makeRequest<T>(
    endpoint: string, 
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const defaultOptions: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    };

    const requestOptions = { ...defaultOptions, ...options };

    try {
      console.log(`üåê API Request: ${requestOptions.method || 'GET'} ${url}`);
      
      const response = await fetch(url, requestOptions);
      
      const data = await response.json();

      if (!response.ok) {
        const error: APIError = data;
        throw new Error(`API Error (${response.status}): ${error.message || 'Unknown error'}`);
      }

      console.log(`‚úÖ API Response: ${response.status}`, data);
      return data;

    } catch (error) {
      console.error(`‚ùå API Error:`, error);
      
      if (error instanceof TypeError && error.message.includes('fetch')) {
        throw new Error('Network error - please check your internet connection');
      }
      
      throw error;
    }
  }

  async post<T>(endpoint: string, data: any): Promise<T> {
    return this.makeRequest<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.makeRequest<T>(endpoint, {
      method: 'GET',
    });
  }
}

// Create API client instance
const apiClient = new APIClient(API_BASE_URL);

/**
 * ATS Score API
 */
export const atsScoreAPI = {
  /**
   * Calculate ATS score for resume and job description
   */
  async calculateScore(request: ATSScoreRequest): Promise<ATSScoreResponse> {
    try {
      const response = await apiClient.post<ATSScoreResponse>('/api/ats-score', request);
      return response;
    } catch (error) {
      console.error('ATS Score calculation failed:', error);
      throw new Error(`Failed to calculate ATS score: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
};

/**
 * PDF Generation API
 */
export const pdfGenerationAPI = {
  /**
   * Generate PDF from HTML content
   */
  async generatePDF(request: PDFGenerationRequest): Promise<PDFGenerationResponse> {
    try {
      const response = await apiClient.post<PDFGenerationResponse>('/api/generate-pdf', request);
      return response;
    } catch (error) {
      console.error('PDF generation failed:', error);
      throw new Error(`Failed to generate PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Generate and download PDF
   */
  async generateAndDownload(
    html: string, 
    fileName: string = 'resume'
  ): Promise<string> {
    try {
      const response = await this.generatePDF({ html, fileName });
      
      // Trigger download
      const link = document.createElement('a');
      link.href = response.url;
      link.download = `${fileName}.pdf`;
      link.target = '_blank';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      return response.url;
    } catch (error) {
      console.error('PDF download failed:', error);
      throw error;
    }
  },

  /**
   * Generate and open PDF in new tab
   */
  async generateAndOpen(
    html: string, 
    fileName: string = 'resume'
  ): Promise<string> {
    try {
      const response = await this.generatePDF({ html, fileName });
      
      // Open in new tab
      window.open(response.url, '_blank');
      
      return response.url;
    } catch (error) {
      console.error('PDF opening failed:', error);
      throw error;
    }
  }
};

/**
 * Health check API
 */
export const healthAPI = {
  /**
   * Check if APIs are healthy
   */
  async checkHealth(): Promise<{ ats: boolean; pdf: boolean }> {
    const results = { ats: false, pdf: false };
    
    try {
      // Test ATS API with minimal data
      await atsScoreAPI.calculateScore({
        resumeText: 'Test resume content',
        jobDescription: 'Test job description'
      });
      results.ats = true;
    } catch (error) {
      console.warn('ATS API health check failed:', error);
    }
    
    try {
      // Test PDF API with minimal data
      await pdfGenerationAPI.generatePDF({
        html: '<div>Test</div>',
        fileName: 'health-check'
      });
      results.pdf = true;
    } catch (error) {
      console.warn('PDF API health check failed:', error);
    }
    
    return results;
  }
};

/**
 * Export API configuration for debugging
 */
export const getAPIConfig = () => ({
  baseUrl: API_BASE_URL,
  endpoints: {
    atsScore: '/api/ats-score',
    generatePdf: '/api/generate-pdf'
  }
});

// Export API client for advanced usage
export { apiClient };

// Default export
export default {
  atsScore: atsScoreAPI,
  pdfGeneration: pdfGenerationAPI,
  health: healthAPI,
  config: getAPIConfig
}; 